<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dc/dff/lista_8c" kind="file" language="C++">
    <compoundname>lista.c</compoundname>
    <includes refid="d9/d91/lista_8h" local="yes">lista.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="d0/dfb/camadadedados_8h" local="yes">camadadedados.h</includes>
    <incdepgraph>
      <node id="38">
        <label>stdlib.h</label>
      </node>
      <node id="34">
        <label>src/lista.c</label>
        <link refid="dc/dff/lista_8c"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>lista.h</label>
        <link refid="d9/d91/lista_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>string.h</label>
      </node>
      <node id="36">
        <label>camadadedados.h</label>
        <link refid="d0/dfb/camadadedados_8h"/>
      </node>
      <node id="37">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/dff/lista_8c_1ae3b99323b6f8f35d80bb69ff1a27985e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
        <definition>LISTA criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
<para>Função que cria uma lista inicialmente vazia A função define a cabeça da lista e a cauda como vazias e dá return desses valores. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>É Uma lista </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista x vazia </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lista.c" line="7" column="1" bodyfile="src/lista.c" bodystart="7" bodyend="12"/>
        <references refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" compoundref="d9/d91/lista_8h" startline="12">lista::cabeca</references>
        <references refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" compoundref="d9/d91/lista_8h" startline="12">lista::proximo</references>
        <referencedby refid="d4/da9/interface_8h_1a24da95ebeede4a540e37790ce8be359b" compoundref="dd/dda/interface_8c" startline="140" endline="414">interpretador</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/dff/lista_8c_1a37ba5fc3cfddb6bc94d4b54b00bc696e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
        <definition>LISTA insere_cabeca</definition>
        <argsstring>(LISTA L, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Insere um valor na cabeça da lista. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>É uma Lista </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>É uma lista </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valor</parametername>
</parameternamelist>
<parameterdescription>
<para>É um valor aleatório </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(if(L-&gt;cabeca == NULL)) return da lista L com o valor na cabeça </para></simplesect>
<simplesect kind="return"><para>(else) return da lista x </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lista.c" line="15" column="1" bodyfile="src/lista.c" bodystart="15" bodyend="25"/>
        <references refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" compoundref="d9/d91/lista_8h" startline="12">lista::cabeca</references>
        <references refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" compoundref="d9/d91/lista_8h" startline="12">lista::proximo</references>
        <referencedby refid="d4/da9/interface_8h_1a24da95ebeede4a540e37790ce8be359b" compoundref="dd/dda/interface_8c" startline="140" endline="414">interpretador</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/dff/lista_8c_1abfcb205f3eb670157be0d1221021714b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Devolve a cabeça da lista. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>É uma lista </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cabeça da lista L </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lista.c" line="28" column="1" bodyfile="src/lista.c" bodystart="28" bodyend="30"/>
        <references refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" compoundref="d9/d91/lista_8h" startline="12">lista::cabeca</references>
        <referencedby refid="d4/da9/interface_8h_1a24da95ebeede4a540e37790ce8be359b" compoundref="dd/dda/interface_8c" startline="140" endline="414">interpretador</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/dff/lista_8c_1ad9380152361127432c55c1c6067e05ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Devolve a cauda da lista. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>É uma lista </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a cauda da lista L </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lista.c" line="33" column="1" bodyfile="src/lista.c" bodystart="33" bodyend="35"/>
        <references refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" compoundref="d9/d91/lista_8h" startline="12">lista::proximo</references>
      </memberdef>
      <memberdef kind="function" id="dc/dff/lista_8c_1a9026a681a68322b5ec7f07137b864cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
        <definition>LISTA remove_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Remove a cabeça da lista (libertando o espaço ocupado) e devolve a cauda Igualamos a lista x á cauda da lista L e damos return á lista x. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>É uma lista </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>É uma lista </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista x </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lista.c" line="38" column="1" bodyfile="src/lista.c" bodystart="38" bodyend="46"/>
        <references refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" compoundref="d9/d91/lista_8h" startline="12">lista::cabeca</references>
        <references refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" compoundref="d9/d91/lista_8h" startline="12">lista::proximo</references>
        <referencedby refid="d4/da9/interface_8h_1a24da95ebeede4a540e37790ce8be359b" compoundref="dd/dda/interface_8c" startline="140" endline="414">interpretador</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/dff/lista_8c_1a4c10928f7acaa4e3de3760cea0dfd9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="d9/d91/lista_8h_1ac294034fbe3bf9846e0465051a477f55" kindref="member">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Devolve verdareiro se a lista é vazia. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>(f(L-&gt;cabeca == NULL &amp;&amp; L-&gt;proximo == NULL)) True </para></simplesect>
<simplesect kind="return"><para>(else) False </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/lista.c" line="49" column="1" bodyfile="src/lista.c" bodystart="49" bodyend="55"/>
        <references refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" compoundref="d9/d91/lista_8h" startline="12">lista::cabeca</references>
        <references refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" compoundref="d9/d91/lista_8h" startline="12">lista::proximo</references>
        <referencedby refid="d4/da9/interface_8h_1a24da95ebeede4a540e37790ce8be359b" compoundref="dd/dda/interface_8c" startline="140" endline="414">interpretador</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d91/lista_8h" kindref="compound">lista.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/dfb/camadadedados_8h" kindref="compound">camadadedados.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="d9/d91/lista_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" refkind="member"><highlight class="normal"><ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/><ref refid="dc/dff/lista_8c_1ae3b99323b6f8f35d80bb69ff1a27985e" kindref="member">criar_lista</ref>()<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/>x<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="df/d41/structlista" kindref="compound">CABECA</ref>));</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>x-&gt;<ref refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" kindref="member">cabeca</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>x-&gt;<ref refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" kindref="member">proximo</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="d9/d91/lista_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" refkind="member"><highlight class="normal"><ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/><ref refid="dc/dff/lista_8c_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(<ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/>L,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*valor)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L-&gt;<ref refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" kindref="member">cabeca</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L-&gt;<ref refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" kindref="member">cabeca</ref><sp/>=<sp/>valor;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/>x<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="df/d41/structlista" kindref="compound">CABECA</ref>));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" kindref="member">cabeca</ref><sp/>=<sp/>valor;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x-&gt;<ref refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" kindref="member">proximo</ref><sp/>=<sp/>L;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="d9/d91/lista_8h_1abfcb205f3eb670157be0d1221021714b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="dc/dff/lista_8c_1abfcb205f3eb670157be0d1221021714b" kindref="member">devolve_cabeca</ref>(<ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L-&gt;<ref refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" kindref="member">cabeca</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="d9/d91/lista_8h_1ad9380152361127432c55c1c6067e05ae" refkind="member"><highlight class="normal"><ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/><ref refid="dc/dff/lista_8c_1ad9380152361127432c55c1c6067e05ae" kindref="member">proximo</ref>(<ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L-&gt;<ref refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" kindref="member">proximo</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="d9/d91/lista_8h_1a9026a681a68322b5ec7f07137b864cbd" refkind="member"><highlight class="normal"><ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/><ref refid="dc/dff/lista_8c_1a9026a681a68322b5ec7f07137b864cbd" kindref="member">remove_cabeca</ref>(<ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L-&gt;<ref refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" kindref="member">proximo</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/>x<sp/>=<sp/>L-&gt;<ref refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" kindref="member">proximo</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L-&gt;<ref refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" kindref="member">cabeca</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="d9/d91/lista_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/dff/lista_8c_1a4c10928f7acaa4e3de3760cea0dfd9c0" kindref="member">lista_esta_vazia</ref>(<ref refid="df/d41/structlista" kindref="compound">LISTA</ref><sp/>L)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L-&gt;<ref refid="df/d41/structlista_1ab7945423d00f5d335df61c1812c111fa" kindref="member">cabeca</ref><sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>L-&gt;<ref refid="df/d41/structlista_1af9b3f841c6bd58d83f984ed3be745cf7" kindref="member">proximo</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/lista.c"/>
  </compounddef>
</doxygen>
